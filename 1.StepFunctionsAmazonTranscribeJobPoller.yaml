AWSTemplateFormatVersion: "2010-09-09"
Description: "An example job status poller template."
Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "AdminAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
        # - PolicyName: S3ExecutionPolicy
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - "S3:*"
        #         Resource: "*"

  SubmitTranscribeJob:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
      Code:
        S3Bucket: "sydneysummit-voc-code"
        S3Key: "SubmitTranscribeJobLambda.zip"
        # ZipFile: |
          
        #   from __future__ import print_function

        #   import json
        #   import urllib
        #   import boto3
        #   import datetime

        #   print('Loading function')

        #   s3 = boto3.client('s3')
        #   transcribe = boto3.client('transcribe')

        #   def lambda_handler(event, context):
        #       # Get the object from the event and show its content type
        #       bucket = event['bucket']    
        #       key = event['key']
              
        #       try:
                  
        #           media_path = "https://s3.amazonaws.com/%s/%s" % (bucket,key)

        #           # extract Call Recording UID to be used as Jobname
        #           # sample call recording filename '5b7a59b2-f54c-4c3e-9e07-2156df2169c1_20180315T05:57_UTC.wav'
        #           recordingFilename = key.split('/')[-1]
        #           contactId = recordingFilename.split('_')[0]
        #           disconnectTime = recordingFilename.split('_')[1]
                  
        #           # jobName = 'AmazonConnectCall_' + recordingFilename.split('_')[0]
        #           timestamp = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
        #           jobName = 'AmazonConnect_' + timestamp + '_' + recordingFilename.split('_')[0]
                  
        #           print ('INFO Media Path: ' + media_path)
        #           print ('INFO Jobname: ' + jobName)
                  
        #           transcribe_response = transcribe.start_transcription_job(
        #               TranscriptionJobName=jobName,
        #               LanguageCode='en-US',
        #               MediaSampleRateHertz=8000, #Amazon Connect Telephony rate
        #               MediaFormat='wav',
        #               Media={
        #                   'MediaFileUri': media_path
        #               }
        #           )
                  
        #           print ("INFO Amazon Transcribe Job " + transcribe_response['TranscriptionJob']['TranscriptionJobName'], transcribe_response['TranscriptionJob']['TranscriptionJobStatus'])
                  
        #           return {
        #               'jobName' : jobName,
        #               'contactId': contactId,
        #               'disconnectTime': disconnectTime
        #           }
                  
        #       except Exception as e:
        #           print(e)
        #           print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))
        #           raise e

      Runtime: "python2.7"
      Timeout: "25"

  CheckJobFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          
          import json
          import boto3

          print('Loading function')

          transcribe = boto3.client('transcribe')

          def lambda_handler(event, context):

              # Log the received event
              print("Received event: " + json.dumps(event, indent=2))
              jobName = event['jobName']
              try:
                  # Query Job Status
                  print("Checking job status")
                  response = transcribe.get_transcription_job(TranscriptionJobName=jobName)
                  # Log response from Amazon Transcribe
                  # print("Response: " + json.dumps(response, indent=2))
                  print(response)
                  # Return the jobStatus
                  jobStatus = response['TranscriptionJob']['TranscriptionJobStatus']
                  print("Job status: ", jobStatus)
                  return jobStatus
                  
              except Exception as e:
                  print(e)
                  message = 'Error getting job status!!!!'
                  print(message)
                  raise Exception(message)
          
      Runtime: "python2.7"
      Timeout: "25"

  CopyTranscriptJobFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |

            import json
            import boto3
            import urllib2
            import dateutil.parser as parser

            print('Loading function2')

            transcribe = boto3.client('transcribe')
            s3 = boto3.client('s3')

            def lambda_handler(event, context):
                
                print("Received event: " + json.dumps(event, indent=2))
                jobName = event['guid']['jobName']
                contactId = event['guid']['contactId']
                # disconnectTime = event['guid']['disconnectTime']
                # disconnectTime = parser.parse(event['guid']['disconnectTime']).isoformat()
                disconnectTime = parser.parse(event['guid']['disconnectTime']).strftime("%Y-%m-%d %H:%M:%S")
                print('INFO Changed disconnectTime format', disconnectTime)
                bucket = event['bucket']
                recordingKey = event['key']
                
                try:
                    # Generate transcriptFileName
                    transcriptFileName = recordingKey.replace(".wav",".json")
                    transcriptFileName = transcriptFileName.replace("CallRecordings","CallTranscripts")
                    print(transcriptFileName)
                    
                    transcribe_response = transcribe.get_transcription_job(TranscriptionJobName=jobName)
                    
                    print("Downloading transcript file")
                    transcriptFileUri = transcribe_response['TranscriptionJob']['Transcript']['TranscriptFileUri']
                    transcriptrequest = urllib2.Request(transcriptFileUri)
                    transcriptFilereponse = urllib2.urlopen(transcriptrequest)
                    transcriptFile_json = json.load(transcriptFilereponse) 
                    
                    #Add Amazon Connect ContactID and Disconenct Time generated from file name
                    transcriptFile_json.update({'ContactId': contactId})
                    transcriptFile_json.update({'DisconnectTimestamp': disconnectTime})
                    
                    # transcriptFile_binary = json.dumps(transcriptFile_json)
                    
                    print("Uploading transcript to S3 bucket")
                    s3.put_object(Body=json.dumps(transcriptFile_json), Bucket=bucket, Key=transcriptFileName)
                    
                    return transcriptFileName
                    
                except Exception as e:
                    print(e)
                    message = 'Error !!!'
                    print(message)
                    raise Exception(message)

                return 

      Runtime: "python2.7"
      Timeout: "25"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "AdminAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  TranscribeJobStatusPollerStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "State Machine to submit a job to Transcribe, poll for job completion, and copy transrciption back to source location where the audio resides.",
              "StartAt": "SubmitTranscribeJob",
              "Version": "1.0",
              "TimeoutSeconds":600,
              "States":
              {
                "SubmitTranscribeJob": {
                  "Type": "Task",
                  "Resource": "${submitTranscribeJobArn}",
                  "ResultPath": "$.guid",
                  "Next": "Wait X Seconds"
                },
                "Wait X Seconds": {
                  "Type": "Wait",
                  "SecondsPath": "$.waittime",
                  "Next": "Get Job Status"
                },
                "Get Job Status": {
                  "Type": "Task",
                  "Resource": "${checkJobArn}",
                  "Next": "Job Complete?",
                  "InputPath": "$.guid",
                  "ResultPath": "$.status"
                },
                "Job Complete?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "FAILED",
                      "Next": "Job Failed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "COMPLETED",
                      "Next": "Copy Transcript to Source Bucket"
                    }
                  ],
                  "Default": "Wait X Seconds"
                },
                "Job Failed": {
                  "Type": "Fail",
                  "Cause": "Amazon Transcribe Job Failed",
                  "Error": "DescribeJob returned FAILED"
                },
                "Copy Transcript to Source Bucket": {
                  "Type": "Task",
                  "Resource": "${copyTranscriptJobArn}",
                  "End": true
                }
              }
            }
          - {submitTranscribeJobArn: !GetAtt [ SubmitTranscribeJob, Arn ], checkJobArn: !GetAtt [ CheckJobFunction, Arn ], copyTranscriptJobArn: !GetAtt [ CopyTranscriptJobFunction, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

Outputs:

  StateMachineArn:
    Value:
      Ref: TranscribeJobStatusPollerStateMachine