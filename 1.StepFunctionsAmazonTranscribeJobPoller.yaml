AWSTemplateFormatVersion: "2010-09-09"
Description: "An example job status poller template."

Parameters: 
  stateMachineExecutionNamePrefixParameter: 
      Type: String
      Default: AmazonConnect
      Description: Prefix to be used when creating a SF execution
  waitTimeParameter: 
      Type: String
      Default: 5
      Description: Enter the ARN of the created Amazon Transcribe Job Submit Job State Machine
  AmazonConnectInstanceAliasParameter:
      Type: String
      Default: sydney-summit
      Description: Enter the name of Amazon Connect Instance Alias (created manually as prereq)

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "AdminAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
        - PolicyName: S3ExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "S3:*"
                Resource: "*"

  SubmitTranscribeJob:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SubmitTranscribeJob          
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        S3Bucket: !Sub tommcm-demo-${AWS::Region}
        S3Key: voc-analytics/SubmitTranscribeJobLambda_1-0-0.zip
      Runtime: "python2.7"
      Timeout: "25"

  CheckJobFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CheckTranscribeJob      
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        S3Bucket: !Sub tommcm-demo-${AWS::Region}
        S3Key: voc-analytics/CheckTranscribeJobLambda_1-0-0.zip        
      Runtime: "python2.7"
      Timeout: "25"

  CopyTranscriptJobFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CopyTranscriptJob
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        S3Bucket: !Sub tommcm-demo-${AWS::Region}
        S3Key: voc-analytics/CopyTranscriptJobLambda_1-0-0.zip 
      Runtime: "python2.7"
      Timeout: "25"

  AmazonConnectCallRecordingsS3events:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AWS::StackName}-S3eventtoSubmitTranscribeJob
      Description: Task to attempt to submit an execution to state machine
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        S3Bucket: !Sub tommcm-demo-${AWS::Region}
        S3Key: voc-analytics/AmazonConnectCallTranscription_1-0-0.zip
      Environment:
        Variables:
          stateMachineArn: !Ref TranscribeJobStatusPollerStateMachine
          stateMachineExecutionNamePrefix: !Ref stateMachineExecutionNamePrefixParameter
          waittime: !Ref waitTimeParameter
      Runtime: "python2.7"
      Timeout: "25"

  ComprehendEnricher:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ComprehendEnricher'
      Description: Task to attempt to enrich text assets with comprehend
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        S3Bucket: !Sub tommcm-demo-${AWS::Region}
        S3Key: voc-analytics/ComprehendEnricher_1-0-0.zip
      Environment:
        Variables:
          ENTITY_STREAM: !Ref DeliverystreamEntitiesFirehose
          SENTIMENT_STREAM: !Ref DeliverystreamSentimentFirehose
          PHRASES_STREAM: !Ref DeliverystreamKeyPhrasesFirehose
      Runtime: "python2.7"
      Timeout: "60" 

  S3eventtoKinesis:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub '${AWS::StackName}-S3eventtoComprehendEnricher'
      Description: Task to attempt to send transcipt json to kinesis enrichment
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        S3Bucket: !Sub tommcm-demo-${AWS::Region}
        S3Key: voc-analytics/S3EventToKDFH_1-0-0.zip
      Environment:
        Variables:
          DeliveryStreamName: !Ref DeliverystreamComprehendEnricher     
      Runtime: "python2.7"
      Timeout: "60" 

  DeliverystreamComprehendEnricher:
    DependsOn:
      - DeliveryPolicy
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}-comprehend-enricher'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref S3ConnectEnrichedbucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '1'
        CompressionFormat: UNCOMPRESSED
        Prefix: EnrichedTranscripts/
        RoleARN: !GetAtt DeliveryRole.Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt ComprehendEnricher.Arn 
              Type: Lambda 
  
  DeliverystreamEntitiesFirehose:
      DependsOn:
        - DeliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-comprehend-entities'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3ConnectEnrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: EnrichedTranscripts/Entities/
          RoleARN: !GetAtt DeliveryRole.Arn


  DeliverystreamKeyPhrasesFirehose:
      DependsOn:
        - DeliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-comprehend-phrases'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3ConnectEnrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: EnrichedTranscripts/Phrases/
          RoleARN: !GetAtt DeliveryRole.Arn

  DeliverystreamSentimentFirehose:
      DependsOn:
        - DeliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-comprehend-sentiment'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3ConnectEnrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: EnrichedTranscripts/Sentiment/
          RoleARN: !GetAtt DeliveryRole.Arn

  DeliverystreamContactTraceRecords:
      DependsOn:
        - DeliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-connect-contacttracerecords'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3ConnectEnrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: ContactTraceRecords/
          RoleARN: !GetAtt DeliveryRole.Arn

  S3ConnectEnrichedbucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-connect-enriched"
      VersioningConfiguration:
        Status: Enabled

  AmazonConnectCallBucket:
      Type: "AWS::S3::Bucket"
      Properties: 
        BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-connect"
        # NotificationConfiguration:
        #   LambdaConfigurations:
        #     -
        #       Function: !GetAtt AmazonConnectCallRecordingsS3events.Arn
        #       Event: "s3:ObjectCreated:*"
        #       Filter:
        #         S3Key:
        #           Rules:
        #             -
        #               Name: suffix
        #               Value: .wav
        #             - 
        #               Name: prefix
        #               Value: !Sub connect/${AmazonConnectInstanceAliasParameter}/CallRecordings  

  S3TranscribeBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AmazonConnectCallBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:aws:s3:::"
                  -
                    Ref: "AmazonConnectCallBucket"
                  - "/*"
            Principal:
              Service: 
                - "transcribe.amazonaws.com"


  DeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  
  DeliveryPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: firehose_Delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref DeliveryRole

  LambdaInvokePermissionS3event:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName: !GetAtt S3eventtoKinesis.Arn
        Action: "lambda:InvokeFunction"
        Principal: "s3.amazonaws.com"
        SourceArn: !GetAtt AmazonConnectCallBucket.Arn

  LambdaInvokePermissionFirehoseTransformation:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt ComprehendEnricher.Arn
      Action: "lambda:InvokeFunction"
      Principal: "firehose.amazonaws.com"
      SourceArn: !GetAtt DeliverystreamComprehendEnricher.Arn

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "AdminAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  TranscribeJobStatusPollerStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "State Machine to submit a job to Transcribe, poll for job completion, and copy transrciption back to source location where the audio resides.",
              "StartAt": "SubmitTranscribeJob",
              "Version": "1.0",
              "TimeoutSeconds":600,
              "States":
              {
                "SubmitTranscribeJob": {
                  "Type": "Task",
                  "Resource": "${submitTranscribeJobArn}",
                  "ResultPath": "$.guid",
                  "Next": "Wait X Seconds"
                },
                "Wait X Seconds": {
                  "Type": "Wait",
                  "SecondsPath": "$.waittime",
                  "Next": "Get Job Status"
                },
                "Get Job Status": {
                  "Type": "Task",
                  "Resource": "${checkJobArn}",
                  "Next": "Job Complete?",
                  "InputPath": "$.guid",
                  "ResultPath": "$.status"
                },
                "Job Complete?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "FAILED",
                      "Next": "Job Failed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "COMPLETED",
                      "Next": "Copy Transcript to Source Bucket"
                    }
                  ],
                  "Default": "Wait X Seconds"
                },
                "Job Failed": {
                  "Type": "Fail",
                  "Cause": "Amazon Transcribe Job Failed",
                  "Error": "DescribeJob returned FAILED"
                },
                "Copy Transcript to Source Bucket": {
                  "Type": "Task",
                  "Resource": "${copyTranscriptJobArn}",
                  "End": true
                }
              }
            }
          - {submitTranscribeJobArn: !GetAtt [ SubmitTranscribeJob, Arn ], checkJobArn: !GetAtt [ CheckJobFunction, Arn ], copyTranscriptJobArn: !GetAtt [ CopyTranscriptJobFunction, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

Outputs:

  StateMachineArn:
    Value:
      Ref: TranscribeJobStatusPollerStateMachine
  AmazonConnectCallRecordingBucket:
    Value: 
      Ref: AmazonConnectCallBucket
  DeliverystreamContactTraceRecords:
    Value: 
      Ref: DeliverystreamContactTraceRecords
