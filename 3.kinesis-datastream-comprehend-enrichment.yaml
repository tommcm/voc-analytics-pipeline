AWSTemplateFormatVersion: 2010-09-09
Description: Stack for Firehose DeliveryStream S3 Destination.
Parameters: 
  S3TrancriptArnParameter: 
    Type: String
    Default: 'arn:aws:s3:::connect-qwe-708252083442-us-east-1'
    Description: Enter the ARN of the S3 bucket for which the Amazon Transcribe output lands


Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "AdminAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  LambdaComprehendEnricher:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ComprehendEnricher'
      Description: Task to attempt to enrich text assets with comprehend
      # Handler: "lambda_function.lambda_handler"
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          from __future__ import print_function

          import os
          import base64
          import json
          import boto3

          print('Loading function')

          comprehend = boto3.client('comprehend')

          def lambda_handler(event, context):
              output = []

              sentimentStream = os.environ['SENTIMENT_STREAM']
              entityStream = os.environ['ENTITY_STREAM']
              phrasesStream = os.environ['PHRASES_STREAM']

              for record in event['records']:
                  print('INFO:', record['recordId'])
                  payload = base64.b64decode(record['data'])

                  # Do custom processing on the payload here
                  payload_json = json.loads(payload)
                  # recordingLocation = payload_json['Recording']['Location']
                  print (payload_json)
                  
                  transcript = payload_json['results']['transcripts'][0]['transcript']
                  print ("INFO Transcript:", transcript)
                  
                  # Detecting Language
                  language_response = comprehend.detect_dominant_language(Text=transcript)
                  language_code = language_response['Languages'][0]['LanguageCode']
                  payload_json.update({'LanguageCode': language_code})
                  print('INFO Language Code:', language_code)
                  
                  # Detecting Sentiment
                  sentiment_reponse = comprehend.detect_sentiment(Text=transcript, LanguageCode=language_code)
                  sentiment = sentiment_reponse['Sentiment']
                  sentiment_score = sentiment_reponse['SentimentScore']
                  payload_json.update({'Sentiment': sentiment})
                  payload_json.update({'SentimentScore': sentiment_score})
                  print('INFO Sentiment:', sentiment)
                  print('INFO Sentiment Score:', sentiment_score)
                  
                  # Detecting Entities
                  entities_reponse = comprehend.detect_entities(Text=transcript, LanguageCode=language_code)
                  entities = entities_reponse['Entities']
                  payload_json.update({'Entities': entities})
                  print('INFO Entities:', entities)
                  
                  # Detecing key phrases
                  keyphrases_reponse = comprehend.detect_key_phrases(Text=transcript, LanguageCode=language_code)
                  keyphrases = keyphrases_reponse['KeyPhrases']
                  payload_json.update({'KeyPhrases': keyphrases})
                  print('INFO KeyPhrases:', keyphrases)
                                    
                  processed_payload = json.dumps(payload_json)

                  output_record = {
                      'recordId': record['recordId'],
                      'result': 'Ok',
                      'data': base64.b64encode(processed_payload)
                  }
                  output.append(output_record)

              print('Successfully processed {} records.'.format(len(event['records'])))

              return {'records': output}
      Environment:
        Variables:
          ENTITY_STREAM: !Ref deliverystreamEntitiesFirehose
          SENTIMENT_STREAM: !Ref deliverystreamSentimentFirehose
          PHRASES_STREAM: !Ref deliverystreamKeyPhrasesFirehose

      Runtime: "python2.7"
      Timeout: "60" 
  
  
  LambdaS3eventtoKinesis:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub '${AWS::StackName}-S3eventtoKinesis'
      Description: Task to attempt to send transcipt json to kinesis enrichment
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: | 
          # 
          from __future__ import print_function

          import json
          import urllib
          import boto3
          import os

          print('Loading function')

          s3 = boto3.resource('s3')
          firehose = boto3.client('firehose')

          def lambda_handler(event, context):
              #print("Received event: " + json.dumps(event, indent=2))
              
              deliveryStreamName = os.environ['DeliveryStreamName']
              
              # Get the object from the event and show its content type
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key'].encode('utf8'))
              # response = s3.get_object(Bucket=bucket, Key=key)
              
              content_object = s3.Object(bucket, key)
              file_content = content_object.get()['Body'].read().decode('utf-8')
              json_content = json.loads(file_content)   
              json_data = json.dumps(json_content)
              
              print("INFO: Adding S3 object to stream...", key)
              response = firehose.put_record(
                  DeliveryStreamName=deliveryStreamName,
                  Record={
                      'Data':json_data 
                  }
              )
              
              return 
    
      Environment:
        Variables:
          DeliveryStreamName: !Sub '${AWS::StackName}-connect-comprehend-enricher'       
      Runtime: "python2.7"
      Timeout: "60" 

  
  deliverystreamComprehendEnricher:
    DependsOn:
      - deliveryPolicy
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}-connect-comprehend-enricher'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref s3Enrichedbucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '1'
        CompressionFormat: UNCOMPRESSED
        Prefix: EnrichedTranscripts/
        RoleARN: !GetAtt deliveryRole.Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt LambdaComprehendEnricher.Arn 
              Type: Lambda 
  
  deliverystreamEntitiesFirehose:
      DependsOn:
        - deliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-connect-comprehend-entities'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref s3Enrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: EnrichedTranscripts/Entities/
          RoleARN: !GetAtt deliveryRole.Arn


  deliverystreamKeyPhrasesFirehose:
      DependsOn:
        - deliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-connect-comprehend-phrases'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref s3Enrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: EnrichedTranscripts/Phrases/
          RoleARN: !GetAtt deliveryRole.Arn

  deliverystreamSentimentFirehose:
      DependsOn:
        - deliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-connect-comprehend-sentiment'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref s3Enrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: EnrichedTranscripts/Sentiment/
          RoleARN: !GetAtt deliveryRole.Arn



  deliverystreamContactTraceRecords:
      DependsOn:
        - deliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        DeliveryStreamName: !Sub '${AWS::StackName}-connect-contacttracerecords'
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref s3Enrichedbucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '1'
          CompressionFormat: UNCOMPRESSED
          Prefix: ContactTraceRecords/
          RoleARN: !GetAtt deliveryRole.Arn
  

  s3Enrichedbucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "connect-enriched-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled

  deliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  
  deliveryPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref deliveryRole

  LambdaInvokePermissionS3event:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName: !GetAtt LambdaS3eventtoKinesis.Arn
        Action: "lambda:InvokeFunction"
        Principal: "s3.amazonaws.com"
        SourceArn: !Ref S3TrancriptArnParameter

  LambdaInvokePermissionFirehoseTransformation:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaComprehendEnricher.Arn
      Action: "lambda:InvokeFunction"
      Principal: "firehose.amazonaws.com"
      SourceArn: !GetAtt deliverystreamComprehendEnricher.Arn